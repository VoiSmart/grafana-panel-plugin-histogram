{"version":3,"sources":["../src/histogram_ctrl.js"],"names":["template","angular","moment","kbn","_","TimeSeries","fileExport","MetricsPanelCtrl","HistogramCtrl","$scope","$injector","annotationsSrv","hiddenSeries","seriesList","colors","panelDefaults","datasource","renderer","yaxes","label","show","logBase","min","max","format","xaxis","grid","threshold1","threshold2","threshold1Color","threshold2Color","lines","fill","linewidth","points","pointradius","bars","stack","percentage","legend","values","current","total","avg","nullPointMode","steppedLine","tooltip","value_type","shared","ordering","msResolution","timeFrom","timeShift","targets","aliasColors","seriesOverrides","defaults","panel","$root","events","on","onRender","bind","onDataReceived","onDataError","onDataSnapshotLoad","onInitEditMode","onInitPanelActions","addEditorTab","logScales","unitFormats","getUnitFormats","actions","push","text","click","axis","subItem","value","render","annotationsPromise","getAnnotations","dashboard","range","evt","publishAppEvent","snapshotData","err","dataList","isString","datapointsWarning","datapointsCount","datapointsOutside","map","seriesHandler","then","loading","annotations","seriesData","index","datapoints","alias","target","colorIndex","length","color","series","unit","last","utc","from","isMsResolutionNeeded","applySeriesOverrides","yaxis","serie","event","ctrlKey","metaKey","shiftKey","toggleSeriesExclusiveMode","hidden","alreadyExclusive","every","each","info","override","findWhere","without","refresh","exportSeriesListToCsv","exportSeriesListToCsvColumns"],"mappings":"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","file":"histogram_ctrl.js","sourcesContent":["import 'app/plugins/panel/graph/legend';\nimport 'app/plugins/panel/graph/series_overrides_ctrl';\n\nimport template from './template';\nimport angular from 'angular';\nimport moment from 'moment';\nimport kbn from 'app/core/utils/kbn';\nimport _ from 'lodash';\nimport TimeSeries from 'app/core/time_series2';\nimport * as fileExport from 'app/core/utils/file_export';\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\n\nexport class HistogramCtrl extends MetricsPanelCtrl {\n  /** @ngInject */\n  constructor($scope, $injector, annotationsSrv) {\n    super($scope, $injector);\n\n    this.annotationsSrv = annotationsSrv;\n    this.hiddenSeries = {};\n    this.seriesList = [];\n    this.colors = [];\n\n    var panelDefaults = {\n      // datasource name, null = default datasource\n      datasource: null,\n      // sets client side (flot) or native graphite png renderer (png)\n      renderer: 'flot',\n      yaxes: [\n        {\n          label: null,\n          show: true,\n          logBase: 1,\n          min: null,\n          max: null,\n          format: 'short'\n        },\n        {\n          label: null,\n          show: true,\n          logBase: 1,\n          min: null,\n          max: null,\n          format: 'short'\n        }\n      ],\n      xaxis: {\n        show: true\n      },\n      grid          : {\n        threshold1: null,\n        threshold2: null,\n        threshold1Color: 'rgba(216, 200, 27, 0.27)',\n        threshold2Color: 'rgba(234, 112, 112, 0.22)'\n      },\n      // show/hide lines\n      lines         : true,\n      // fill factor\n      fill          : 1,\n      // line width in pixels\n      linewidth     : 2,\n      // show hide points\n      points        : false,\n      // point radius in pixels\n      pointradius   : 5,\n      // show hide bars\n      bars          : false,\n      // enable/disable stacking\n      stack         : false,\n      // stack percentage mode\n      percentage    : false,\n      // legend options\n      legend: {\n        show: true, // disable/enable legend\n        values: false, // disable/enable legend values\n        min: false,\n        max: false,\n        current: false,\n        total: false,\n        avg: false\n      },\n      // how null points should be handled\n      nullPointMode : 'connected',\n      // staircase line mode\n      steppedLine: false,\n      // tooltip options\n      tooltip       : {\n        value_type: 'cumulative',\n        shared: true,\n        ordering: 'alphabetical',\n        msResolution: false,\n      },\n      // time overrides\n      timeFrom: null,\n      timeShift: null,\n      // metric queries\n      targets: [{}],\n      // series color overrides\n      aliasColors: {},\n      // other style overrides\n      seriesOverrides: [],\n    };\n\n    _.defaults(this.panel, panelDefaults);\n    _.defaults(this.panel.tooltip, panelDefaults.tooltip);\n    _.defaults(this.panel.grid, panelDefaults.grid);\n    _.defaults(this.panel.legend, panelDefaults.legend);\n\n    this.colors = $scope.$root.colors;\n\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('init-panel-actions', this.onInitPanelActions.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Legend', 'public/app/plugins/panel/graph/tab_legend.html', 2);\n    this.addEditorTab('Display', 'public/plugins/grafana-histogram-panel/tab_display.html', 3);\n    this.addEditorTab('Histogram Options', 'public/plugins/grafana-histogram-panel/tab_options.html', 4);\n\n    this.logScales = {\n      'linear': 1,\n      'log (base 2)': 2,\n      'log (base 10)': 10,\n      'log (base 32)': 32,\n      'log (base 1024)': 1024\n    };\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  onInitPanelActions(actions) {\n    actions.push({text: 'Export CSV (series as rows)', click: 'ctrl.exportCsv()'});\n    actions.push({text: 'Export CSV (series as columns)', click: 'ctrl.exportCsvColumns()'});\n    actions.push({text: 'Toggle legend', click: 'ctrl.toggleLegend()'});\n  }\n\n  setUnitFormat(axis, subItem) {\n    axis.format = subItem.value;\n    this.render();\n  }\n\n  issueQueries(datasource) {\n    this.annotationsPromise = this.annotationsSrv.getAnnotations({\n      dashboard: this.dashboard,\n      panel: this.panel,\n      range: this.range,\n    });\n    return super.issueQueries(datasource);\n  }\n\n  zoomOut(evt) {\n    this.publishAppEvent('zoom-out', evt);\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    this.annotationsPromise = this.annotationsSrv.getAnnotations({\n      dashboard: this.dashboard,\n      panel: this.panel,\n      range: this.range,\n    });\n    this.onDataReceived(snapshotData);\n  }\n\n  onDataError(err) {\n    this.seriesList = [];\n    this.render([]);\n  }\n\n  onDataReceived(dataList) {\n    // png renderer returns just a url\n    if (_.isString(dataList)) {\n      this.render(dataList);\n      return;\n    }\n\n    this.datapointsWarning = false;\n    this.datapointsCount = 0;\n    this.datapointsOutside = false;\n    this.seriesList = dataList.map(this.seriesHandler.bind(this));\n    this.datapointsWarning = this.datapointsCount === 0 || this.datapointsOutside;\n\n    this.annotationsPromise.then(annotations => {\n      this.loading = false;\n      this.seriesList.annotations = annotations;\n      this.render(this.seriesList);\n    }, () => {\n      this.loading = false;\n      this.render(this.seriesList);\n    });\n  }\n\n  seriesHandler(seriesData, index) {\n    var datapoints = seriesData.datapoints;\n    var alias = seriesData.target;\n    var colorIndex = index % this.colors.length;\n    var color = this.panel.aliasColors[alias] || this.colors[colorIndex];\n\n    var series = new TimeSeries({\n      datapoints: datapoints,\n      alias: alias,\n      color: color,\n      unit: seriesData.unit,\n    });\n\n    if (datapoints && datapoints.length > 0) {\n      var last = moment.utc(datapoints[datapoints.length - 1][1]);\n      var from = moment.utc(this.range.from);\n      if (last - from < -10000) {\n        this.datapointsOutside = true;\n      }\n\n      this.datapointsCount += datapoints.length;\n      this.panel.tooltip.msResolution = this.panel.tooltip.msResolution || series.isMsResolutionNeeded();\n    }\n\n\n    return series;\n  }\n\n  onRender() {\n    if (!this.seriesList) { return; }\n\n    for (let series of this.seriesList) {\n      series.applySeriesOverrides(this.panel.seriesOverrides);\n\n      if (series.unit) {\n        this.panel.yaxes[series.yaxis-1].format = series.unit;\n      }\n    }\n  }\n\n  changeSeriesColor(series, color) {\n    series.color = color;\n    this.panel.aliasColors[series.alias] = series.color;\n    this.render();\n  }\n\n  toggleSeries(serie, event) {\n    if (event.ctrlKey || event.metaKey || event.shiftKey) {\n      if (this.hiddenSeries[serie.alias]) {\n        delete this.hiddenSeries[serie.alias];\n      } else {\n        this.hiddenSeries[serie.alias] = true;\n      }\n    } else {\n      this.toggleSeriesExclusiveMode(serie);\n    }\n    this.render();\n  }\n\n  toggleSeriesExclusiveMode (serie) {\n    var hidden = this.hiddenSeries;\n\n    if (hidden[serie.alias]) {\n      delete hidden[serie.alias];\n    }\n\n    // check if every other series is hidden\n    var alreadyExclusive = _.every(this.seriesList, value => {\n      if (value.alias === serie.alias) {\n        return true;\n      }\n\n      return hidden[value.alias];\n    });\n\n    if (alreadyExclusive) {\n      // remove all hidden series\n      _.each(this.seriesList, value => {\n        delete this.hiddenSeries[value.alias];\n      });\n    } else {\n      // hide all but this serie\n      _.each(this.seriesList, value => {\n        if (value.alias === serie.alias) {\n          return;\n        }\n\n        this.hiddenSeries[value.alias] = true;\n      });\n    }\n  }\n\n  toggleAxis(info) {\n    var override = _.findWhere(this.panel.seriesOverrides, {alias: info.alias});\n    if (!override) {\n      override = { alias: info.alias };\n      this.panel.seriesOverrides.push(override);\n    }\n    info.yaxis = override.yaxis = info.yaxis === 2 ? 1 : 2;\n    this.render();\n  };\n\n  addSeriesOverride(override) {\n    this.panel.seriesOverrides.push(override || {});\n  }\n\n  removeSeriesOverride(override) {\n    this.panel.seriesOverrides = _.without(this.panel.seriesOverrides, override);\n    this.render();\n  }\n\n  // Called from panel menu\n  toggleLegend() {\n    this.panel.legend.show = !this.panel.legend.show;\n    this.refresh();\n  }\n\n  legendValuesOptionChanged() {\n    var legend = this.panel.legend;\n    legend.values = legend.min || legend.max || legend.avg || legend.current || legend.total;\n    this.render();\n  }\n\n  exportCsv() {\n    fileExport.exportSeriesListToCsv(this.seriesList);\n  }\n\n  exportCsvColumns() {\n    fileExport.exportSeriesListToCsvColumns(this.seriesList);\n  }\n}\n\nHistogramCtrl.template = template;\n"]}